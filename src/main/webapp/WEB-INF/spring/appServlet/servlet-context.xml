<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<!-- <resources mapping="/resources/**" location="/resources/" /> -->
	<resources mapping="/**" location="/WEB-INF/static/" />
	
	
	
	<!-- ViewResolver -->
	<!--  ViewResolver가 순서대로 진행하기 위해서는 order 속성을 추가하면 됨. 그래서 첫번째 viewResolver에서 null을 return하면 다음 viewResolver로 넘어감.
		- UrlBasedViewResolver는 특성상 null을 return하지 않고, exception을 발생시킴....
		- InternalResourceViewResolver는 UrlBasedViewResolver를 상속받아 구현된 객체이므로 마찬가지로, 무조건 마지막으로 실행됨 & 특성상 null을 return하지 않고, exception을 발생시킴.		
	-->
	<!-- 첫 메인 페이지 -->
	<!-- prefix :"/WEB-INF/static/" 로 설정하는 경우 url이 /WEB-INF/static(위의 resources mapping 때문)/WEB-INF/static/index.html 경로로 찾게됨. 그래서 "/" 설정함. CustomViewResolver의 jv.getUrl()을 통해 client로부터 요청온 url을 확인할 수 있음.-->
	<!-- suffix : ".html"이라 안한 이유는 CustomViewResolver에 / 또는 /tournament로 요청오는 것과 상관없이 client로부터 들어오는 url 또는 beanName이 suffix에 설정한대로 들어오기 때문에 분기처리 의미가 없어짐. 그래서 controller에서 확장자명까지 같이 return하고 있음. -->
	<beans:bean class="com.common.viewResolver.CustomViewResolver" p:order="1">
		<beans:property name="viewClass" value = "org.springframework.web.servlet.view.JstlView" />
		<beans:property name="prefix" value="/" />
		<beans:property name="suffix" value="" />
	</beans:bean>
	
	<!-- <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="2">
		<beans:property name="prefix" value="/WEB-INF/static/" />
		<beans:property name="suffix" value=".html" />
	</beans:bean> -->	
	
	<!-- controller에서 jsp 이용하는 경우 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
    <beans:bean class = "org.springframework.web.servlet.view.UrlBasedViewResolver" p:order="2">
		<beans:property name="viewClass" value = "org.springframework.web.servlet.view.JstlView" />
		<beans:property name="prefix" value="/WEB-INF/worldCup/" />
		<beans:property name="suffix" value="" />
	</beans:bean>
	
	<context:component-scan base-package="com.myProfile.*" />
	
	
	
	
	
	
	
	<!-- spring-data-jpa -->
	<!-- spring 과 spring-data-jpa 사이에 호환되는 버전이어야 함. 호환되는 버전이 아닌 경우 jpa태그 요소에 에러 남. -->
	<jpa:repositories base-package="com.myProfile.thyun.Repository"/>
	
	
	<beans:bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <beans:property name="driverClassName" value="oracle.jdbc.OracleDriver"></beans:property>
        <beans:property name="url" value="jdbc:oracle:thin:@oracle.c8jzssql6cwa.ap-northeast-2.rds.amazonaws.com:1521:orcl"></beans:property>
        <beans:property name="username" value="thyunAhn"></beans:property>
        <beans:property name="password" value="20160222"></beans:property>
    </beans:bean>
    
    
    <beans:bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
	    <beans:property name="jpaVendorAdapter"> 
	    	<beans:bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" /> 
	    </beans:property> 
	    <beans:property name="jpaProperties"> 
	    	<beans:props> 
	    		<!-- <beans:prop key="hibernate.dialect">org.hibernate.dialect.HSQLDialect</beans:prop> --> <!-- Hsql 형식에 맞게 변환해주는 클래스 --> 
	    		<beans:prop key="hibernate.connection.pool_size">1</beans:prop> 
	    		<beans:prop key="hibernate.connection.shutdown">true</beans:prop> <!-- hsql에 있는 마지막 연결이 끊어지면 데이터베이스 shutdown 하는 플래그 --> 
	    		<beans:prop key="hibernate.show_sql">true</beans:prop> <!-- SQL 출력 --> 
	    		<!-- <beans:prop key="hibernate.hbm2ddl.auto">create</beans:prop> --> <!-- 테이블 자동 생성 --> 
	    	</beans:props> 
	    </beans:property>
	    <beans:property name="packagesToScan" value="com.myProfile.thyun.model" />
	    <beans:property name="dataSource" ref="dataSource" />	
	</beans:bean>
	
	<beans:bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager"> 
		<beans:property name="entityManagerFactory" ref="entityManagerFactory"></beans:property> 
	</beans:bean>

	
</beans:beans>